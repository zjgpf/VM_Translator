//push constant 0
//*sp=i
@0
D=A
@SP
A=M
M=D
//sp++
@SP
M=M+1
//pop local 0
//addr=segmentPointer+i
@0
D=A
@LCL
D=M+D
@addr
M=D
//sp--
@SP
M=M-1
//*addr=*sp
@SP
A=M
D=M
@addr
A=M
M=D
//label LOOP_START
(LOOP_START)
//push argument 0
//D=segmentPointer+i
@0
D=A
@ARG
D=M+D
//*sp=*D
A=D
D=M
@SP
A=M
M=D
//sp++
@SP
M=M+1
//push local 0
//D=segmentPointer+i
@0
D=A
@LCL
D=M+D
//*sp=*D
A=D
D=M
@SP
A=M
M=D
//sp++
@SP
M=M+1
//add
//sp--
@SP
M=M-1
//D=*sp
@SP
A=M
D=M
//sp--
@SP
M=M-1
//*sp=D+*sp 
@SP
A=M
M=M+D
//sp++
@SP
M=M+1
//pop local 0	
//addr=segmentPointer+i
@0	
D=A
@LCL
D=M+D
@addr
M=D
//sp--
@SP
M=M-1
//*addr=*sp
@SP
A=M
D=M
@addr
A=M
M=D
//push argument 0
//D=segmentPointer+i
@0
D=A
@ARG
D=M+D
//*sp=*D
A=D
D=M
@SP
A=M
M=D
//sp++
@SP
M=M+1
//push constant 1
//*sp=i
@1
D=A
@SP
A=M
M=D
//sp++
@SP
M=M+1
//sub
//sp--
@SP
M=M-1
//D=*sp
@SP
A=M
D=M
//sp--
@SP
M=M-1
//*sp=*sp-D
@SP
A=M
M=M-D
//sp++
@SP
M=M+1
//pop argument 0
//addr=segmentPointer+i
@0
D=A
@ARG
D=M+D
@addr
M=D
//sp--
@SP
M=M-1
//*addr=*sp
@SP
A=M
D=M
@addr
A=M
M=D
//push argument 0
//D=segmentPointer+i
@0
D=A
@ARG
D=M+D
//*sp=*D
A=D
D=M
@SP
A=M
M=D
//sp++
@SP
M=M+1
//if-goto LOOP_START
//SP--
@SP
M=M-1
//D=*SP
@SP
A=M
D=M
@LOOP_START
D;JNE
//push local 0
//D=segmentPointer+i
@0
D=A
@LCL
D=M+D
//*sp=*D
A=D
D=M
@SP
A=M
M=D
//sp++
@SP
M=M+1
