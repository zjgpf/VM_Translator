//push argument 1
//D=segmentPointer+i
@1
D=A
@ARG
D=M+D
//*sp=*D
A=D
D=M
@SP
A=M
M=D
//sp++
@SP
M=M+1
//pop pointer 1
//SP--
@SP
M=M-1
//THIS/THAT=*SP
@SP
A=M
D=M
@THAT
M=D
//push constant 0
//*sp=i
@0
D=A
@SP
A=M
M=D
//sp++
@SP
M=M+1
//pop that 0
//addr=segmentPointer+i
@0
D=A
@THAT
D=M+D
@addr
M=D
//sp--
@SP
M=M-1
//*addr=*sp
@SP
A=M
D=M
@addr
A=M
M=D
//push constant 1
//*sp=i
@1
D=A
@SP
A=M
M=D
//sp++
@SP
M=M+1
//pop that 1
//addr=segmentPointer+i
@1
D=A
@THAT
D=M+D
@addr
M=D
//sp--
@SP
M=M-1
//*addr=*sp
@SP
A=M
D=M
@addr
A=M
M=D
//push argument 0
//D=segmentPointer+i
@0
D=A
@ARG
D=M+D
//*sp=*D
A=D
D=M
@SP
A=M
M=D
//sp++
@SP
M=M+1
//push constant 2
//*sp=i
@2
D=A
@SP
A=M
M=D
//sp++
@SP
M=M+1
//sub
//sp--
@SP
M=M-1
//D=*sp
@SP
A=M
D=M
//sp--
@SP
M=M-1
//*sp=*sp-D
@SP
A=M
M=M-D
//sp++
@SP
M=M+1
//pop argument 0
//addr=segmentPointer+i
@0
D=A
@ARG
D=M+D
@addr
M=D
//sp--
@SP
M=M-1
//*addr=*sp
@SP
A=M
D=M
@addr
A=M
M=D
//label MAIN_LOOP_START
(MAIN_LOOP_START)
//push argument 0
//D=segmentPointer+i
@0
D=A
@ARG
D=M+D
//*sp=*D
A=D
D=M
@SP
A=M
M=D
//sp++
@SP
M=M+1
//if-goto COMPUTE_ELEMENT
//SP--
@SP
M=M-1
//D=*SP
@SP
A=M
D=M
@COMPUTE_ELEMENT
D;JNE
//goto END_PROGRAM
@END_PROGRAM
0;JMP
//label COMPUTE_ELEMENT
(COMPUTE_ELEMENT)
//push that 0
//D=segmentPointer+i
@0
D=A
@THAT
D=M+D
//*sp=*D
A=D
D=M
@SP
A=M
M=D
//sp++
@SP
M=M+1
//push that 1
//D=segmentPointer+i
@1
D=A
@THAT
D=M+D
//*sp=*D
A=D
D=M
@SP
A=M
M=D
//sp++
@SP
M=M+1
//add
//sp--
@SP
M=M-1
//D=*sp
@SP
A=M
D=M
//sp--
@SP
M=M-1
//*sp=D+*sp 
@SP
A=M
M=M+D
//sp++
@SP
M=M+1
//pop that 2
//addr=segmentPointer+i
@2
D=A
@THAT
D=M+D
@addr
M=D
//sp--
@SP
M=M-1
//*addr=*sp
@SP
A=M
D=M
@addr
A=M
M=D
//push pointer 1
//*SP=THIS/THAT
@THAT
D=M
@SP
A=M
M=D
//SP++
@SP
M=M+1
//push constant 1
//*sp=i
@1
D=A
@SP
A=M
M=D
//sp++
@SP
M=M+1
//add
//sp--
@SP
M=M-1
//D=*sp
@SP
A=M
D=M
//sp--
@SP
M=M-1
//*sp=D+*sp 
@SP
A=M
M=M+D
//sp++
@SP
M=M+1
//pop pointer 1
//SP--
@SP
M=M-1
//THIS/THAT=*SP
@SP
A=M
D=M
@THAT
M=D
//push argument 0
//D=segmentPointer+i
@0
D=A
@ARG
D=M+D
//*sp=*D
A=D
D=M
@SP
A=M
M=D
//sp++
@SP
M=M+1
//push constant 1
//*sp=i
@1
D=A
@SP
A=M
M=D
//sp++
@SP
M=M+1
//sub
//sp--
@SP
M=M-1
//D=*sp
@SP
A=M
D=M
//sp--
@SP
M=M-1
//*sp=*sp-D
@SP
A=M
M=M-D
//sp++
@SP
M=M+1
//pop argument 0
//addr=segmentPointer+i
@0
D=A
@ARG
D=M+D
@addr
M=D
//sp--
@SP
M=M-1
//*addr=*sp
@SP
A=M
D=M
@addr
A=M
M=D
//goto MAIN_LOOP_START
@MAIN_LOOP_START
0;JMP
//label END_PROGRAM
(END_PROGRAM)
