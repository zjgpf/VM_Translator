//functon SimpleFunction.test 2
(SimpleFunction.test)
//repeat 2 times: push 0
//push constant 0
//*sp=i
@0
D=A
@SP
A=M
M=D
//sp++
@SP
M=M+1
//push constant 0
//*sp=i
@0
D=A
@SP
A=M
M=D
//sp++
@SP
M=M+1
//push local 0
//D=segmentPointer+i
@0
D=A
@LCL
D=M+D
//*sp=*D
A=D
D=M
@SP
A=M
M=D
//sp++
@SP
M=M+1
//push local 1
//D=segmentPointer+i
@1
D=A
@LCL
D=M+D
//*sp=*D
A=D
D=M
@SP
A=M
M=D
//sp++
@SP
M=M+1
//add
//sp--
@SP
M=M-1
//D=*sp
@SP
A=M
D=M
//sp--
@SP
M=M-1
//*sp=D+*sp 
@SP
A=M
M=M+D
//sp++
@SP
M=M+1
//Not
//sp--
@SP
M=M-1
//*sp = -*sp
@SP
A=M
M=!M
//sp++
@SP
M=M+1
//push argument 0
//D=segmentPointer+i
@0
D=A
@ARG
D=M+D
//*sp=*D
A=D
D=M
@SP
A=M
M=D
//sp++
@SP
M=M+1
//add
//sp--
@SP
M=M-1
//D=*sp
@SP
A=M
D=M
//sp--
@SP
M=M-1
//*sp=D+*sp 
@SP
A=M
M=M+D
//sp++
@SP
M=M+1
//push argument 1
//D=segmentPointer+i
@1
D=A
@ARG
D=M+D
//*sp=*D
A=D
D=M
@SP
A=M
M=D
//sp++
@SP
M=M+1
//sub
//sp--
@SP
M=M-1
//D=*sp
@SP
A=M
D=M
//sp--
@SP
M=M-1
//*sp=*sp-D
@SP
A=M
M=M-D
//sp++
@SP
M=M+1
//return
//endFrame=LCL
@LCL
D=M
@endFrame
M=D
//retAddr=*(endFrame-5)
@endFrame
D=M
@5
A=D-A
D=M
@retAddr
M=D
//*ARG=pop()
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
//SP=ARG+1
@ARG
D=M+1
@SP
M=D
//THAT=*(endFrame-1)
@endFrame
D=M
@1
A=D-A
D=M
@THAT
M=D
//THIS=*(endFrame-2)
@endFrame
D=M
@2
A=D-A
D=M
@THIS
M=D
//ARG=*(endFrame-3)
@endFrame
D=M
@3
A=D-A
D=M
@ARG
M=D
//LCL=*(endFrame-4)
@endFrame
D=M
@4
A=D-A
D=M
@LCL
M=D
//goto retAddr
@retAddr
A=M
0;JMP
